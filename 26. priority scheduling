#include <stdio.h>

struct process {
  int id;
  int burst_time;
  int priority;
};

void print_process(struct process *p) {
  printf("Process %d: burst time = %d, priority = %d\n", p->id, p->burst_time, p->priority);
}

void calculate_waiting_time(struct process *processes, int n) {
  int total_waiting_time = 0;
  for (int i = 0; i < n; i++) {
    int waiting_time = 0;
    for (int j = 0; j < i; j++) {
      waiting_time += processes[j].burst_time;
    }
    processes[i].waiting_time = waiting_time;
    total_waiting_time += waiting_time;
  }

  float average_waiting_time = (float)total_waiting_time / n;
  printf("Average waiting time = %.2f\n", average_waiting_time);
}

void calculate_turnaround_time(struct process *processes, int n) {
  int total_turnaround_time = 0;
  for (int i = 0; i < n; i++) {
    int turnaround_time = processes[i].burst_time + processes[i].waiting_time;
    total_turnaround_time += turnaround_time;
  }

  float average_turnaround_time = (float)total_turnaround_time / n;
  printf("Average turnaround time = %.2f\n", average_turnaround_time);
}

int main() {
  int n;
  printf("Enter the number of processes: ");
  scanf("%d", &n);

  struct process processes[n];
  for (int i = 0; i < n; i++) {
    printf("Enter the process id, burst time and priority for process %d: ", i + 1);
    scanf("%d %d %d", &processes[i].id, &processes[i].burst_time, &processes[i].priority);
  }

  // Sort the processes by priority
  for (int i = 0; i < n - 1; i++) {
    for (int j = i + 1; j < n; j++) {
      if (processes[i].priority > processes[j].priority) {
        struct process temp = processes[i];
        processes[i] = processes[j];
        processes[j] = temp;
      }
    }
  }

  // Calculate the waiting time and turnaround time for each process
  calculate_waiting_time(processes, n);
  calculate_turnaround_time(processes, n);

  return 0;
}
