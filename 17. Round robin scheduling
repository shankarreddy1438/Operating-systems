#include<stdio.h>

struct process{
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int remaining_time;
};

void main(){
    int n=3, quantum=4, total_waiting_time=0, total_turnaround_time=0;
    struct process p[3]={{24,0,0,0},{3,0,0,0},{3,0,0,0}};
    
    // Initialize the remaining time of each process
    for(int i=0;i<n;i++){
        p[i].remaining_time=p[i].burst_time;
    }
    
    // Implementing Round Robin scheduling
    int time=0;
    while(1){
        int all_done=1;
        for(int i=0;i<n;i++){
            if(p[i].remaining_time>0){
                all_done=0;
                if(p[i].remaining_time<=quantum){
                    time+=p[i].remaining_time;
                    p[i].remaining_time=0;
                    p[i].waiting_time=time-p[i].burst_time;
                    p[i].turnaround_time=time;
                }
                else{
                    time+=quantum;
                    p[i].remaining_time-=quantum;
                }
            }
        }
        if(all_done==1){
            break;
        }
    }
    
    // Calculating the average waiting time and average turnaround time
    for(int i=0;i<n;i++){
        total_waiting_time+=p[i].waiting_time;
        total_turnaround_time+=p[i].turnaround_time;
    }
    float avg_waiting_time=(float)total_waiting_time/n;
    float avg_turnaround_time=(float)total_turnaround_time/n;
    
    // Printing the results
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for(int i=0;i<n;i++){
        printf("P%d\t%d\t\t%d\t\t%d\n", i+1, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }
    printf("Average waiting time = %.2f\n", avg_waiting_time);
    printf("Average turnaround time = %.2f\n", avg_turnaround_time);
}
