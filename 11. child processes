#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void print_odd_numbers(void)
{
    pid_t pid = getpid();
    printf("Child %d (odd): ", pid);
    for (int i = 1; i <= 20; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
}

void print_even_numbers(void)
{
    pid_t pid = getpid();
    printf("Child %d (even): ", pid);
    for (int i = 2; i <= 20; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
}

void print_multiples_of_3(void)
{
    pid_t pid = getpid();
    printf("Child %d (multiple of 3): ", pid);
    for (int i = 3; i <= 30; i += 3) {
        printf("%d ", i);
    }
    printf("\n");
}

void print_multiples_of_5(void)
{
    pid_t pid = getpid();
    printf("Child %d (multiple of 5): ", pid);
    for (int i = 5; i <= 50; i += 5) {
        printf("%d ", i);
    }
    printf("\n");
}

int main(void)
{
    for (int i = 0; i < 4; i++) {
        pid_t pid = fork();
        if (pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            switch (i) {
                case 0: print_odd_numbers(); break;
                case 1: print_even_numbers(); break;
                case 2: print_multiples_of_3(); break;
                case 3: print_multiples_of_5(); break;
            }
            exit(EXIT_SUCCESS);
        } else {
            printf("Parent: created child %d with pid %d\n", i, pid);
        }
    }

    return 0;
}
