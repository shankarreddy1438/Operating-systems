#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 3

int buffer[BUFFER_SIZE]; // the shared buffer
int in = 0; // index for inserting items
int out = 0; // index for consuming items
int count = 0; // current number of items in buffer

pthread_mutex_t mutex; // mutex for buffer access
pthread_cond_t full; // condition variable for buffer full
pthread_cond_t empty; // condition variable for buffer empty

void *producer(void *arg) {
    int produced_items = 0;
    while (produced_items < 4) {
        // acquire the mutex lock
        pthread_mutex_lock(&mutex);

        // wait until buffer is not full
        while (count == BUFFER_SIZE) {
            pthread_cond_wait(&full, &mutex);
        }

        // produce an item
        int item = rand() % 100;
        printf("Produced item: %d\n", item);

        // insert item into buffer
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        count++;

        // signal that buffer is not empty
        pthread_cond_signal(&empty);

        // release the mutex lock
        pthread_mutex_unlock(&mutex);

        produced_items++;
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    // wait for buffer to be filled
    pthread_mutex_lock(&mutex);
    while (count == 0) {
        pthread_cond_wait(&empty, &mutex);
    }
    pthread_mutex_unlock(&mutex);

    // consume the first item
    int item = buffer[out];
    printf("Consumed item: %d\n", item);

    while (1) {
        // acquire the mutex lock
        pthread_mutex_lock(&mutex);

        // wait until buffer is not empty
        while (count == 0) {
            pthread_cond_wait(&empty, &mutex);
        }

        // consume an item
        int item = buffer[out];
        printf("Consumed item: %d\n", item);

        // remove item from buffer
        out = (out + 1) % BUFFER_SIZE;
        count--;

        // signal that buffer is not full
        pthread_cond_signal(&full);

        // release the mutex lock
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

int main() {
    // initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&full, NULL);
    pthread_cond_init(&empty, NULL);

    // create threads
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // wait for threads to finish
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // cleanup
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);

    return 0;
}
