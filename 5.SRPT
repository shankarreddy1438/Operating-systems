#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
};

// Function to sort an array of processes by their arrival time
void sortProcessesByArrivalTime(struct Process pro[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (pro[j].arrival_time > pro[j+1].arrival_time) {
                struct Process temp = pro[j];
                pro[j] = pro[j+1];
                pro[j+1] = temp;
            }
        }
    }
}

int main() {
    // Input the number of processes
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    // Input the arrival time and burst time of each process
    struct Process pro[n];
    for (int i = 0; i < n; i++) {
        pro[i].pid = i+1;
        printf("Enter the arrival time and burst time of process %d: ", i+1);
        scanf("%d %d", &pro[i].arrival_time, &pro[i].burst_time);
        pro[i].remaining_time = pro[i].burst_time;
    }
    
    // Sort the processes by their arrival time
    sortProcessesByArrivalTime(pro, n);
    
    // Initialize the waiting time and turnaround time of each process to 0
    int wait_time[n], turnaround_time[n];
    for (int i = 0; i < n; i++) {
        wait_time[i] = 0;
        turnaround_time[i] = 0;
    }
    
    // Initialize the current time and the total remaining time
    int curr_time = 0, remaining_time = n;
    
    // Process with shortest remaining time
    int srt_index = 0;
    int srt_time = 9999;
    
    // Loop until all processes are executed
    while (remaining_time > 0) {
        // Find the process with shortest remaining time
        for (int i = 0; i < n; i++) {
            if (pro[i].arrival_time <= curr_time && pro[i].remaining_time < srt_time && pro[i].remaining_time > 0) {
                srt_index = i;
                srt_time = pro[i].remaining_time;
            }
        }
        
        // Reduce the remaining time of the process with shortest remaining time
        pro[srt_index].remaining_time--;
        srt_time = pro[srt_index].remaining_time;
        
        // If the process has completed, update its waiting time and turnaround time
        if (srt_time == 0) {
            remaining_time--;
            int compl_time = curr_time + 1;
            wait_time[srt_index] = compl_time - pro[srt_index].arrival_time - pro[srt_index].burst_time;
            if (wait_time[srt_index] < 0) {
                wait_time[srt_index] = 0;
            }
            turnaround_time[srt_index] = compl_time - pro[srt_index].arrival_time;
        }
        
        // Increment the current time
        curr_time++;
    }
    
    // Calculate the average waiting time and average turnaround time
    float avg_wait_time = 0, avg_turnaround_time = 0;
    for
