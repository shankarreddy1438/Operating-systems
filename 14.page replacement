#include <stdio.h>
#define MAX_SIZE 100

int main() {
    int frames[MAX_SIZE], pages[MAX_SIZE], future[MAX_SIZE], page_faults = 0;
    int n_frames, n_pages, n_future, i, j, k, min_dist, dist, replace_index;
    int found;
    
    // Read the number of page frames
    printf("Enter the number of page frames: ");
    scanf("%d", &n_frames);
    
    // Read the page reference sequence
    printf("Enter the page reference sequence (comma separated): ");
    for(i = 0; i < MAX_SIZE; i++) {
        scanf("%d,", &pages[i]);
        if(pages[i] == -1) {    // Stop reading when -1 is encountered
            break;
        }
    }
    n_pages = i;
    
    // Initialize the frames and future arrays to -1 (empty)
    for(i = 0; i < n_frames; i++) {
        frames[i] = -1;
        future[i] = -1;
    }
    
    // For each page in the reference sequence, check if it's in the frames
    for(i = 0; i < n_pages; i++) {
        found = 0;
        
        // Check if the page is already in the frames
        for(j = 0; j < n_frames; j++) {
            if(frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        
        if(!found) {    // Page fault
            page_faults++;
            
            // Check if there are empty frames
            for(j = 0; j < n_frames; j++) {
                if(frames[j] == -1) {
                    frames[j] = pages[i];
                    found = 1;
                    break;
                }
            }
            
            if(!found) {    // All frames are full, replace the page with the longest future time
                for(j = 0; j < n_frames; j++) {
                    dist = 0;
                    
                    // Find the distance to the next occurrence of the pages in the frames
                    for(k = i; k < n_pages; k++) {
                        if(frames[j] == pages[k]) {
                            future[j] = k;
                            break;
                        }
                        dist++;
                    }
                    
                    if(k == n_pages) {    // The page is not used again in the future
                        replace_index = j;
                        break;
                    }
                    
                    if(dist > min_dist) {
                        min_dist = dist;
                        replace_index = j;
                    }
                }
                
                frames[replace_index] = pages[i];
                future[replace_index] = -1;
            }
        }
    }
    
    printf("Number of page faults: %d\n", page_faults);
    
    return 0;
}
